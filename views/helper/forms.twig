{# group #}
{% macro group(label, field_id, content, help) %}
    {% set field_name = field_id|replace({'field_': ''}) %}
    {% set error = get_form_error(field_name) %}
    <div class="form-group{% if error is not null %} has-error{% endif %}">
        <label for="{{ field_id }}" class="col-sm-2 control-label">{{ label|raw }}</label>
        <div class="col-sm-10">
            {{ content|raw }}
            {% if help is not null or error is not null %}<span class="help-block">{% if help is not null and error is null %}{{ help|raw }}{% else %}{{ error }}{% endif %}</span>{% endif %}
        </div>
    </div>
    <hr>
{% endmacro %}

{# hidden #}
{% macro hidden(name, value, attributes) %}
    {{ get_class('Form').hidden(name, value, attributes)|raw }}
{% endmacro %}

{# input #}
{% macro input(label, name, value, attributes, type) %}
    {% import _self as form %}
    {% set field_id = 'field_' ~ name %}
    {% set attributes = {'type': type|default('text'), 'id': field_id, 'class': 'form-control'}|merge(attributes|default({})) %}
    {{ form.group(label, field_id, get_class('Form').input(name, value, attributes|without('help')), attributes.help) }}
{% endmacro %}

{# input_group #}
{% macro input_group(label, name, value, group, attributes, type) %}
    {% import _self as form %}
    {% set field_id = 'field_' ~ name %}
    {% set attributes = {'type': type|default('text'), 'id': field_id, 'class': 'form-control'}|merge(attributes|default({})) %}
    {% set group = group|merge(group|default({left: null, right: null})) %}
    {% set input_group %}
    <div class="input-group">
        {% if group.left is not null %}
            <div class="input-group-addon">{{ group.left }}</div>
        {% endif %}
        {{ get_class('Form').input(name, value, attributes|without('help'))|raw }}
        {% if group.right is not null %}
            <div class="input-group-addon">{{ group.right }}</div>
        {% endif %}
    </div>
    {% endset %}
    {{ form.group(label, field_id, input_group, attributes.help) }}
{% endmacro %}

{# textarea #}
{% macro textarea(label, name, body, attributes, double_encode) %}
    {% import _self as form %}
    {% set field_id = 'field_' ~ name %}
    {% set attributes = {'id': field_id, 'class': 'form-control', 'rows': 3}|merge(attributes|default({})) %}
    {{ form.group(label, field_id, get_class('Form').textarea(name, body, attributes|without('help'), double_encode|default(true)), attributes.help) }}
{% endmacro %}

{# select #}
{% macro select(label, name, options, selected, attributes, select_text) %}
    {% import _self as form %}
    {% set field_id = 'field_' ~ name %}
    {% set attributes = {'id': field_id, 'class': 'form-control'}|merge(attributes|default({})) %}
    {{ form.group(label, field_id, get_class('Form').select(name, get_fs_options(options, select_text|default('Seleccionar..')), selected, attributes|without('help')), attributes.help) }}
{% endmacro %}

{# _options_list [[label, name, value, checked, attributes]] #}
{% macro _option_list(label, type, options, help) %}
    {% import _self as form %}
    {% set html_options = '' %}
    {% for key, option in options %}
        {% set field_id = 'field_' ~ option[1] ~ '_' ~ option[2] %}
        {% set attributes = {'id': field_id }|merge(option[4]|default({})) %}
        {% set html_option %}
        <div class="{{ type }}"><label>{{ attribute(get_class('Form'), type, [option[1], option[2], option[3], attributes])|raw }} {{ option[0]|raw|default('&nbsp;') }}</label></div>
        {% endset %}
        {% set html_options = html_options ~ html_option %}
    {% endfor %}
    {{ form.group(label, null, html_options, help) }}
{% endmacro %}

{# option #}
{% macro option(type, label, name, value, checked, attributes) %}
    {% import _self as form %}
    {% set field_id = 'field_' ~ name %}
    {% set attributes = {'id': field_id}|merge(attributes|default({})) %}
    {% set html_input %}
    <div class="{{ type }}"><label>{{ attribute(get_class('Form'), type, [name, value, checked, attributes|without('help')])|raw }} {{ label|raw }}</label></div>
    {% endset %}
    {{ form.group(null, field_id, html_input, attributes.help) }}
{% endmacro %}

{# checkbox #}
{% macro checkbox(label, name, value, checked, attributes) %}
    {% import _self as form %}
    {{ form.option('checkbox', label, name, value, checked, attributes) }}
{% endmacro %}

{# radios #}
{% macro radios(label, options, help) %}
    {% import _self as form %}
    {{ form._option_list(label, 'radio', options, help) }}
{% endmacro %}

{# checkboxes #}
{% macro checkboxes(label, options, help) %}
    {% import _self as form %}
    {{ form._option_list(label, 'checkbox', options, help) }}
{% endmacro %}

{# button #}
{% macro button(text, icon, attributes) %}
    {% if attributes is iterable %}
        {% set attributes = attributes|merge({class: 'btn ' ~ attributes.class|default('btn-default')}) %}
    {% else %}
        {% set attributes = {}|merge({class: 'btn '~ attributes|default('btn-default')}) %}
    {% endif %}
    {% if icon is not null %}{% set text %}<i class="{{ icon }}"></i> {{ text }}{% endset %}{% endif %}
    {% if attributes.href is not null %}
        {{ get_class('HTML').anchor(attributes.href, text, attributes)|raw }}
    {% else %}
        {{ get_class('Form').button(null, text, attributes)|raw }}
    {% endif %}
{% endmacro %}

{# link_button #}
{% macro link_button(url, text, icon, attributes) %}
    {% import _self as form %}
    {% set attributes = {href: url}|merge(attributes|default({})) %}
    {{ form.button(text, icon, attributes) }}
{% endmacro %}

{# submit #}
{% macro submit(text, class, cancel) %}
    {% import _self as form %}
    <div class="form-group">
        <div class="col-xs-10 col-xs-offset-2">
            {% if class is iterable %}
                {% set class = class|merge({type: 'submit', class:class.class|default('btn-primary')}) %}
            {% else %}
                {% set class = {type: 'submit', class: class|default('btn-primary')} %}
            {% endif %}
            {{ form.button(text, class.icon|default(null), class|without('icon')) }}
            {% if cancel is null or cancel is iterable %}
                {% if cancel.href is null %}
                    {% set onclick %}history.{% if get_form_error() == true %}go(-2);{% else %}back();{% endif %} return false;{% endset %}
                {% endif %}
                {{ form.link_button(cancel.href|default('#'), cancel.text|default('Cancelar'), cancel.icon|default(null), {onclick: onclick}|merge(cancel|default({})|without(['text', 'icon']))) }}
            {% endif %}
        </div>
    </div>
{% endmacro %}